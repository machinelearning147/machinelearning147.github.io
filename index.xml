<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shravan Kumar</title>
    <link>https://machinelearning147.github.io/</link>
    <description>Recent content on Shravan Kumar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2019 10:25:40 +0530</lastBuildDate>
    
	<atom:link href="https://machinelearning147.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Paraboloid_Function_Optimization</title>
      <link>https://machinelearning147.github.io/posts/paraboloid_function_optimization/</link>
      <pubDate>Thu, 30 May 2019 10:25:40 +0530</pubDate>
      
      <guid>https://machinelearning147.github.io/posts/paraboloid_function_optimization/</guid>
      <description>#import required packages from IPython.display import Image import numpy as np import plotly.plotly as py import plotly.graph_objs as go  url_eqn = &#39;https://wikimedia.org/api/rest_v1/media/math/render/svg/9fe43b236cfd731febae18c507782b7d33ac33e5&#39; url_img = &#39;https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Max_paraboloid.svg/700px-Max_paraboloid.svg.png&#39;  Image(url=url_img)  $$f(x,y) = -(x^2 + y^2) + 4$$
def paraboloid(x,y): return -(x**2 + y**2) + 4  s = np.linspace(-10,10, 240) t = np.linspace(-10,10, 240) tGrid, sGrid = np.meshgrid(s, t) x = tGrid y = sGrid z = paraboloid(x,y)  def plot_3dfunc(x,y,z, filename, title = None): surface = go.</description>
    </item>
    
    <item>
      <title>MNIST using GPU: Tesla K80 on ColabResearch</title>
      <link>https://machinelearning147.github.io/posts/mnist_on_colaboratory_using_gpu/</link>
      <pubDate>Mon, 10 Sep 2018 13:24:01 +0530</pubDate>
      
      <guid>https://machinelearning147.github.io/posts/mnist_on_colaboratory_using_gpu/</guid>
      <description>MNIST using GPU: Tesla K80 on ColabResearch
import required packages
import tensorflow as tf sess = tf.InteractiveSession()  from tensorflow.python.client import device_lib  Check the devices: using&amp;gt; device_lib.list_local_devices()
NOte: In order to make use of GPU: Runtime&amp;gt; Change runtime type&amp;gt; select GPU in Hardware Accelerator
device_lib.list_local_devices()  [name: &amp;quot;/device:CPU:0&amp;quot; device_type: &amp;quot;CPU&amp;quot; memory_limit: 268435456 locality { } incarnation: 10739214734195363675, name: &amp;quot;/device:GPU:0&amp;quot; device_type: &amp;quot;GPU&amp;quot; memory_limit: 358350848 locality { bus_id: 1 } incarnation: 6782277748504694444 physical_device_desc: &amp;quot;device: 0, name: Tesla K80, pci bus id: 0000:00:04.</description>
    </item>
    
    <item>
      <title>Visualizing Tensorflow Graphs</title>
      <link>https://machinelearning147.github.io/posts/visualizing&#43;tensorflow&#43;graphs/</link>
      <pubDate>Mon, 10 Sep 2018 12:14:01 +0530</pubDate>
      
      <guid>https://machinelearning147.github.io/posts/visualizing&#43;tensorflow&#43;graphs/</guid>
      <description>Using a local TensorBoard instance to visualize the graph import tensorflow as tf  Using a cloud-hosted TensorBoard instance to do the rendering # TensorFlow Graph visualizer code import numpy as np from IPython.display import clear_output, Image, display, HTML def strip_consts(graph_def, max_const_size=32): &amp;quot;&amp;quot;&amp;quot;Strip large constant values from graph_def.&amp;quot;&amp;quot;&amp;quot; strip_def = tf.GraphDef() for n0 in graph_def.node: n = strip_def.node.add() n.MergeFrom(n0) if n.op == &#39;Const&#39;: tensor = n.attr[&#39;value&#39;].tensor size = len(tensor.tensor_content) if size &amp;gt; max_const_size: tensor.</description>
    </item>
    
    <item>
      <title>Get set go with Tensorflow</title>
      <link>https://machinelearning147.github.io/posts/get&#43;set&#43;go&#43;-&#43;tensorflow/</link>
      <pubDate>Mon, 10 Sep 2018 11:14:01 +0530</pubDate>
      
      <guid>https://machinelearning147.github.io/posts/get&#43;set&#43;go&#43;-&#43;tensorflow/</guid>
      <description>Pip installation !pip install tensorflow!pip install tensorflow-gpu  Anaconda Installation !conda install -c conda-forge tensorflow!conda install -c anaconda tensorflow-gpu  Basic Usage 1. Building the graph import tensorflow as tf matrix1 = tf.constant([[3., 3.]]) matrix2 = tf.constant([[2.],[2.]]) print(matrix1, matrix2) product = tf.matmul(matrix2, matrix1)  Tensor(&amp;quot;Const_4:0&amp;quot;, shape=(1, 2), dtype=float32) Tensor(&amp;quot;Const_5:0&amp;quot;, shape=(2, 1), dtype=float32)  2.Launching the graph in a session Method 1 # Launch the default graph. sess = tf.Session() result = sess.</description>
    </item>
    
  </channel>
</rss>